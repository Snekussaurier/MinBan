{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-minban-api-documentation","title":"Welcome to the MinBan API Documentation!","text":"<p>MinBan is a minimal Kanban application designed to help you manage tasks for your projects efficiently.  The backend is powered by Go with the Gin framework, offering a fast and lightweight API to handle all your Kanban-related needs. </p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation: Set up MinBan locally.</li> <li>Docker Setup</li> <li>Source Setup</li> <li>API Routes:</li> <li>Authentication: Learn how to authenticate with the API and perform login, logout, and session checks.<ul> <li>Login</li> <li>Logout</li> <li>Check Auth</li> </ul> </li> <li>Card: Manage cards within a project.<ul> <li>Get Cards</li> <li>Create Card</li> <li>Update Card</li> <li>Delete Card</li> </ul> </li> <li>State: Manage task states (or columns).<ul> <li>Get States</li> <li>Create State</li> <li>Update State</li> <li>Delete State</li> </ul> </li> <li>Tag: Manage tags for tasks.<ul> <li>Get Tags</li> <li>Create Tag</li> <li>Update Tag</li> <li>Delete Tag</li> </ul> </li> <li>Database: Overview of MinBan's SQLite database schema and relationships.</li> </ul>"},{"location":"#technologies","title":"Technologies","text":"<p>The backend leverages:</p> <ul> <li>Go: Efficient and high-performance backend language.</li> <li>Gin Framework: A fast and simple web framework for building APIs.</li> <li>SQLite: A lightweight database system for storing data locally.</li> <li>JWT Authentication: For securing user access.</li> </ul>"},{"location":"#contribution","title":"Contribution","text":"<p>MinBan is an open-source project. Contributions are always welcome! Feel free to submit issues or pull requests on the GitHub repository.</p>"},{"location":"database/","title":"Database Schema","text":"<p>Structure and relationships of the SQLite database tables used in the MinBan system.</p> <p></p>"},{"location":"database/#tables","title":"Tables","text":""},{"location":"database/#user-table","title":"User Table","text":"<p>Stores information about users.</p> Column Type Constraints <code>id</code> char(36) Primary Key <code>name</code> varchar(40) NOT NULL <code>password</code> char(64) NOT NULL"},{"location":"database/#card-table","title":"Card Table","text":"<p>Stores information about cards.</p> Column Type Constraints <code>id</code> char(36) Primary Key <code>title</code> varchar(60) NOT NULL <code>description</code> text NOT NULL <code>position</code> int NOT NULL <code>state</code> int Foreign Key <code>user_id</code> char(36) Foreign Key"},{"location":"database/#tag-table","title":"Tag Table","text":"<p>Stores information about tags.</p> Column Type Constraints <code>name</code> varchar(20) Primary Key <code>color</code> varchar(6) NOT NULL"},{"location":"database/#card_tags-table","title":"Card_Tags Table","text":"<p>Associates cards with tags. This table is used to manage the many-to-many relationship between cards and tags.</p> Column Type Constraints <code>card_id</code> varchar(36) Foreign Key <code>tag</code> varchar(20) Foreign Key"},{"location":"database/#state-table","title":"State Table","text":"<p>Stores information about states (columns) for organizing cards.</p> Column Type Constraints <code>id</code> int Primary Key <code>name</code> varchar(20) NOT NULL <code>position</code> int NOT NULL <code>color</code> char(6) NOT NULL"},{"location":"installation/","title":"Installation","text":"<p>You have a few options for deploying MinBan, depending on your needs. We offer Docker images for the majority of platforms. You can also install and run MinBan from source if Docker is not your thing.</p> <ul> <li>Docker</li> <li>From Source</li> </ul>"},{"location":"installation/docker/","title":"Docker Installation","text":""},{"location":"installation/docker/#using-docker-compose","title":"Using Docker Compose","text":"<p>To set up and run the MinBan backend using Docker Compose, create a <code>docker-compose.yml</code> file in your project directory with the following configuration:</p> <pre><code>services:\n  app:\n    image: ghcr.io/snekussaurier/minban-backend:latest\n    container_name: minban-backend\n    ports:\n      - \"9916:9916\"\n    volumes:\n      - ./data:/app/data  # Ensure that your local 'data' directory exists\n    environment:\n      - DATABASE_PATH=/app/data/miniban.db  # Path to the SQLite database\n      - USER_NAME=default  # Default username\n      - USER_PASSWORD=123  # Default user password\n      - JWT_SECRET_KEY=&lt;secure_secret_key&gt;  # Secret key for JWT authentication\n</code></pre> <p>Save this configuration to a file called docker-compose.yml.</p> <p>Run the application with the following command:</p> <pre><code>docker-compose up\n</code></pre> <p>This will start the MinBan backend application on port 9916, and it will persist data in the ./data directory on your local machine.</p>"},{"location":"installation/docker/#using-docker-run","title":"Using Docker Run","text":"<p>Alternatively, you can run the MinBan backend using the docker run command:</p> <pre><code>docker run -p 9916:9916 -v ./data:/app/data \\\n  -e DATABASE_PATH=/app/data/miniban.db \\\n  -e USER_NAME=snekussaurier \\\n  -e USER_PASSWORD=123 \\\n  -e JWT_SECRET_KEY=&lt;secure_secret_key&gt; \\\n  ghcr.io/snekussaurier/minban-backend:latest\n</code></pre>"},{"location":"installation/source/","title":"Source Installation","text":"<p>To build and run the MinBan backend from source, follow these steps:</p>"},{"location":"installation/source/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>First, clone the MinBan backend repository:</p> <pre><code>git clone https://github.com/Snekussaurier/minban-backend.git\ncd minban-backend\n</code></pre>"},{"location":"installation/source/#2-install-dependencies","title":"2. Install Dependencies","text":"<p>Info</p> <p>Make sure you have Go 1.23+ and SQLite installed on your system.</p>"},{"location":"installation/source/#for-go-installation","title":"For Go installation:","text":"<p>Follow the instructions at golang.org.</p>"},{"location":"installation/source/#for-sqlite-installation","title":"For SQLite installation:","text":"<p>Refer to your system's package manager:</p> Ubuntu/DebianMacOS <pre><code>sudo apt install sqlite3\n</code></pre> <pre><code>brew install sqlite\n</code></pre> <p>Additionally, install gcc and musl-dev for building Go applications</p>"},{"location":"installation/source/#3-build-the-application","title":"3. Build the Application","text":"<p>Navigate to the src folder:</p> <pre><code>cd src\n</code></pre> <p>Download the Go module dependencies:</p> <pre><code>go mod download\n</code></pre> <p>Build the application binary:</p> <pre><code>go build -o main .\n</code></pre> <p>This will create an executable file named main in the current directory.</p>"},{"location":"installation/source/#4-environment-variables","title":"4. Environment Variables","text":"<p>The application needs the following environment variables to be configured. </p> <ul> <li>DATABASE_PATH: Path to the SQLite database file.</li> <li>USER_NAME: Admin username.</li> <li>USER_PASSWORD: Admin password.</li> <li>JWT_SECRET_KEY: Secret key for JWT authentication.</li> </ul>"},{"location":"installation/source/#5-run-the-server","title":"5. Run the Server","text":"<p>Once the binary is built, navigate back to the project root and run the server:</p> <pre><code>./main\n</code></pre> <p>Info</p> <p>The server will start on port 9916 by default. You can access the API at http://localhost:9916.</p>"},{"location":"routes/authentication/check_auth/","title":"Check Authentication Status","text":"GET <code>/api/v1/check-auth</code> <p>This route is used to verify if a user is currently authenticated by checking the validity of the <code>minban_token</code> cookie. It ensures the user is logged in and their session is still active.</p>"},{"location":"routes/authentication/check_auth/#request","title":"Request","text":""},{"location":"routes/authentication/check_auth/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication required</p>"},{"location":"routes/authentication/check_auth/#headers","title":"Headers","text":"<p>No special headers required.</p>"},{"location":"routes/authentication/check_auth/#body","title":"Body","text":"<p>No body is required.</p>"},{"location":"routes/authentication/check_auth/#responses","title":"Responses","text":""},{"location":"routes/authentication/check_auth/#200-ok","title":"<code>200</code> OK","text":"<p>The request was successful, and the <code>minban_token</code> is in the cookie store is not empty and valid.</p>"},{"location":"routes/authentication/check_auth/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The authentication cookie is not present or invalid.</p>"},{"location":"routes/authentication/login/","title":"Login","text":"POST <code>/api/v1/login</code> <p>This route is used to authenticate a user by validating their credentials. On success, it sets an <code>minban_token</code> cookie containing the JWT token for further authenticated requests.</p>"},{"location":"routes/authentication/login/#request","title":"Request","text":""},{"location":"routes/authentication/login/#authentication","title":"Authentication","text":"<p>\ud83d\udd13 None</p>"},{"location":"routes/authentication/login/#headers","title":"Headers","text":"<pre><code>Content-Type: application/json\n</code></pre>"},{"location":"routes/authentication/login/#body-json","title":"Body (JSON)","text":"<pre><code>{\n  \"username\": \"&lt;username&gt;\",\n  \"password\": \"&lt;passowrd&gt;\"\n}\n</code></pre>"},{"location":"routes/authentication/login/#responses","title":"Responses","text":""},{"location":"routes/authentication/login/#204-no-content","title":"<code>204</code> No content","text":"<p>The request was successful, and the user is authenticated. A secure <code>minban_token</code> cookie is set, containing the JWT token for future requests.</p>"},{"location":"routes/authentication/login/#400-bad-request","title":"<code>400</code> Bad request","text":"<p>The request was invalid, usually because the provided username or password is incorrect. The response body will look like:</p> <pre><code>{\n  \"error\": \"Invalid username or password\"\n}\n</code></pre>"},{"location":"routes/authentication/login/#500-internal-server-error","title":"<code>500</code> Internal server error","text":"<p>An unexpected error occurred on the server, typically when generating the JWT token fails. The response body will look like:</p> <pre><code>{\n  \"error\": \"Failed to generate token\"\n}\n</code></pre>"},{"location":"routes/authentication/logout/","title":"Logout","text":"POST <code>/api/v1/logout</code> <p>This route is used to log out a user by invalidating their <code>minban_token</code> cookie. Once the cookie is cleared, the user will no longer be authenticated for future requests.</p>"},{"location":"routes/authentication/logout/#request","title":"Request","text":""},{"location":"routes/authentication/logout/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 No authentication</p>"},{"location":"routes/authentication/logout/#headers","title":"Headers","text":"<p>No special headers required.</p>"},{"location":"routes/authentication/logout/#body","title":"Body","text":"<p>No body is required.</p>"},{"location":"routes/authentication/logout/#responses","title":"Responses","text":""},{"location":"routes/authentication/logout/#204-no-content","title":"<code>204</code> No Content","text":"<p>The request was successful, and the <code>minban_token</code> cookie has been cleared. The user is now logged out.</p>"},{"location":"routes/card/create_card/","title":"Create Card","text":"POST <code>/api/v1/card</code> <p>This route is used to create a new card for the authenticated user. A card must belong to an existing state and can optionally have associated tags.</p>"},{"location":"routes/card/create_card/#request","title":"Request","text":""},{"location":"routes/card/create_card/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication is required. A valid <code>minban_token</code> cookie must be present to authorize the request.</p>"},{"location":"routes/card/create_card/#headers","title":"Headers","text":"<pre><code>Content-Type: application/json\n</code></pre>"},{"location":"routes/card/create_card/#body-json","title":"Body (JSON)","text":"<p>The request body must contain the card details. Example:</p> <pre><code>{\n  \"title\": \"Implement Authentication\",\n  \"description\": \"Add login functionality to the application\",\n  \"state_id\": 1,\n  \"position\": 1,\n  \"tags\": [\n    {\n      \"id\": 2\n    }\n  ]\n}\n</code></pre>"},{"location":"routes/card/create_card/#responses","title":"Responses","text":""},{"location":"routes/card/create_card/#201-created","title":"<code>201</code> Created","text":"<p>The card was successfully created. The response includes the card's unique ID.</p> <p>Example response:</p> <pre><code>{\n  \"id\": \"b7e9a101-6c58-4f21-8228-c1a2bb3fcf38\"\n}\n</code></pre>"},{"location":"routes/card/create_card/#400-bad-request","title":"<code>400</code> Bad Request","text":"<p>The request was invalid. </p> <pre><code>{\n  \"error\": \"State with ID: 1 not found\"\n}\n</code></pre> <p>Reasons for an invalid request</p> <ul> <li>Missing required fields (title, state_id, position).</li> <li>Invalid state_id or tag ID (state or tag does not exist or does not belong to the user).</li> </ul>"},{"location":"routes/card/create_card/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The user is not authenticated, or the minban_token cookie is missing or invalid.</p>"},{"location":"routes/card/create_card/#500-internal-server-error","title":"<code>500</code> Internal Server Error","text":"<p>An unexpected error occurred while creating the card.</p>"},{"location":"routes/card/delete_card/","title":"Delete Card","text":"DELETE <code>/api/v1/card/:card_id</code> <p>This route is used to delete an existing card for the authenticated user. Once deleted, the card is permanently removed from the database.</p>"},{"location":"routes/card/delete_card/#request","title":"Request","text":""},{"location":"routes/card/delete_card/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication is required. A valid <code>minban_token</code> cookie must be present to authorize the request.</p>"},{"location":"routes/card/delete_card/#headers","title":"Headers","text":"<p>No special headers required.</p>"},{"location":"routes/card/delete_card/#parameters","title":"Parameters","text":"<p><code>card_id</code> (string, required): The unique identifier of the card to be deleted.</p>"},{"location":"routes/card/delete_card/#responses","title":"Responses","text":""},{"location":"routes/card/delete_card/#204-no-content","title":"<code>204</code> No Content","text":"<p>The request was successful, and the card was deleted. No content is returned in the response.</p>"},{"location":"routes/card/delete_card/#400-bad-request","title":"<code>400</code> Bad Request","text":"<p>The request was invalid.</p>"},{"location":"routes/card/delete_card/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The user is not authenticated, or the <code>minban_token</code> cookie is missing or invalid.</p>"},{"location":"routes/card/delete_card/#500-internal-server-error","title":"<code>500</code> Internal Server Error","text":"<p>An unexpected error occurred while deleting the card.</p>"},{"location":"routes/card/get_cards/","title":"Get Cards","text":"GET <code>/api/v1/cards</code> <p>This route is used to retrieve all cards associated with the authenticated user. Each card will include its associated tags.</p>"},{"location":"routes/card/get_cards/#request","title":"Request","text":""},{"location":"routes/card/get_cards/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication is required. A valid <code>minban_token</code> cookie must be present to authorize the request.</p>"},{"location":"routes/card/get_cards/#headers","title":"Headers","text":"<p>No special headers required.</p>"},{"location":"routes/card/get_cards/#body","title":"Body","text":"<p>No body is required.</p>"},{"location":"routes/card/get_cards/#responses","title":"Responses","text":""},{"location":"routes/card/get_cards/#200-ok","title":"<code>200</code> OK","text":"<p>The request was successful, and a list of cards associated with the authenticated user is returned. Each card includes its associated tags.</p> <p>Example response:</p> <pre><code>[\n  {\n    \"id\": 1,\n    \"title\": \"Fix Bug #123\",\n    \"description\": \"Resolve the issue causing app crashes.\",\n    \"state_id\": 2,\n    \"position\": 1,\n    \"tags\": [\n      {\n        \"id\": 1,\n        \"name\": \"Bug\",\n        \"color\": \"FF0000\"\n      }\n    ]\n  },\n  {\n    \"id\": 2,\n    \"title\": \"Add New Feature\",\n    \"description\": \"Implement the new user dashboard.\",\n    \"state_id\": 1,\n    \"position\": 2,\n    \"tags\": [\n      {\n        \"id\": 2,\n        \"name\": \"Feature\",\n        \"color\": \"00FF00\"\n      }\n    ]\n  }\n]\n</code></pre>"},{"location":"routes/card/get_cards/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The user is not authenticated, or the <code>minban_token</code> cookie is missing or invalid.</p> <p>Example response:</p> <pre><code>{\n  \"error\": \"Unauthorized\"\n}\n</code></pre>"},{"location":"routes/card/get_cards/#500-internal-server-error","title":"<code>500</code> Internal Server Error","text":"<p>An unexpected error occurred while querying the database.</p> <p>Example response:</p> <pre><code>{\n  \"error\": \"Failed to retrieve cards\"\n}\n</code></pre>"},{"location":"routes/card/update_card/","title":"Update Card","text":"PATCH <code>/api/v1/card/:card_id</code> <p>This route is used to update an existing card for the authenticated user. The card's details, including its title, description, state, position, or tags, can be modified.</p>"},{"location":"routes/card/update_card/#request","title":"Request","text":""},{"location":"routes/card/update_card/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication is required. A valid <code>minban_token</code> cookie must be present to authorize the request.</p>"},{"location":"routes/card/update_card/#headers","title":"Headers","text":"<pre><code>Content-Type: application/json\n</code></pre>"},{"location":"routes/card/update_card/#parameters","title":"Parameters","text":"<p><code>card_id</code> (string, required): The unique identifier of the card to be updated.</p>"},{"location":"routes/card/update_card/#body-json","title":"Body (JSON)","text":"<p>The request body must contain the card details. Example:</p> <pre><code>{\n  \"title\": \"Update Authentication\",\n  \"description\": \"Refactor login functionality for better security\",\n  \"state_id\": 2,\n  \"position\": 3,\n  \"tags\": [\n    {\n      \"id\": 1\n    },\n    {\n      \"id\": 3\n    }\n  ]\n}\n</code></pre>"},{"location":"routes/card/update_card/#responses","title":"Responses","text":""},{"location":"routes/card/update_card/#204-no-content","title":"<code>204</code> No Content","text":"<p>The request was successful, and the card was updated. No content is returned in the response.</p>"},{"location":"routes/card/update_card/#400-bad-request","title":"<code>400</code> Bad Request","text":"<p>The request was invalid.</p>"},{"location":"routes/card/update_card/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The user is not authenticated, or the minban_token cookie is missing or invalid.</p>"},{"location":"routes/card/update_card/#500-internal-server-error","title":"<code>500</code> Internal Server Error","text":"<p>An unexpected error occurred while updating the card.</p>"},{"location":"routes/state/create_state/","title":"Create State","text":"POST <code>/api/v1/state</code> <p>This route is used to create a new state or column for the authenticated user. States represent workflow stages, and cards are assigned to these states.</p>"},{"location":"routes/state/create_state/#request","title":"Request","text":""},{"location":"routes/state/create_state/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication is required. A valid <code>minban_token</code> cookie must be present to authorize the request.</p>"},{"location":"routes/state/create_state/#headers","title":"Headers","text":"<pre><code>Content-Type: application/json\n</code></pre>"},{"location":"routes/state/create_state/#body-json","title":"Body (JSON)","text":"<p>The request body must contain the state details.Example:</p> <pre><code>{\n  \"name\": \"In Progress\",\n  \"position\": 2,\n  \"color\": \"00FF00\"\n}\n</code></pre>"},{"location":"routes/state/create_state/#responses","title":"Responses","text":""},{"location":"routes/state/create_state/#201-created","title":"<code>201</code> Created","text":"<p>The state was successfully created. The response includes the state's unique ID.</p> <p>Example response:</p> <pre><code>{\n  \"id\": 1\n}\n</code></pre>"},{"location":"routes/state/create_state/#400-bad-request","title":"<code>400</code> Bad Request","text":"<p>The request was invalid. </p>"},{"location":"routes/state/create_state/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The user is not authenticated, or the minban_token cookie is missing or invalid.</p>"},{"location":"routes/state/create_state/#500-internal-server-error","title":"<code>500</code> Internal Server Error","text":"<p>An unexpected error occurred while creating the state.</p>"},{"location":"routes/state/delete_state/","title":"Delete State","text":"DELETE <code>/api/v1/state/:state_id</code> <p>This route is used to delete an existing state for the authenticated user. Once deleted, the state is permanently removed from the database.</p>"},{"location":"routes/state/delete_state/#request","title":"Request","text":""},{"location":"routes/state/delete_state/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication is required. A valid <code>minban_token</code> cookie must be present to authorize the request.</p>"},{"location":"routes/state/delete_state/#headers","title":"Headers","text":"<p>No special headers required.</p>"},{"location":"routes/state/delete_state/#parameters","title":"Parameters","text":"<p><code>state_id</code> (integer, required): The unique identifier of the state to be deleted.</p>"},{"location":"routes/state/delete_state/#responses","title":"Responses","text":""},{"location":"routes/state/delete_state/#204-no-content","title":"<code>204</code> No Content","text":"<p>The request was successful, and the state was deleted. No content is returned in the response.</p>"},{"location":"routes/state/delete_state/#400-bad-request","title":"<code>400</code> Bad Request","text":"<p>The request was invalid.</p>"},{"location":"routes/state/delete_state/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The user is not authenticated, or the <code>minban_token</code> cookie is missing or invalid.</p>"},{"location":"routes/state/delete_state/#500-internal-server-error","title":"<code>500</code> Internal Server Error","text":"<p>An unexpected error occurred while deleting the card.</p>"},{"location":"routes/state/get_states/","title":"Get States","text":"GET <code>/api/v1/states</code> <p>This route is used to retrieve all cards associated with the authenticated user. Each card will include its associated tags.</p>"},{"location":"routes/state/get_states/#request","title":"Request","text":""},{"location":"routes/state/get_states/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication is required. A valid <code>minban_token</code> cookie must be present to authorize the request.</p>"},{"location":"routes/state/get_states/#headers","title":"Headers","text":"<p>No special headers required.</p>"},{"location":"routes/state/get_states/#body","title":"Body","text":"<p>No body is required.</p>"},{"location":"routes/state/get_states/#responses","title":"Responses","text":""},{"location":"routes/state/get_states/#200-ok","title":"<code>200</code> OK","text":"<p>The request was successful, and a list of states associated with the authenticated user is returned. Each state includes its details.</p> <p>Example response:</p> <pre><code>[\n  {\n    \"id\": 1,\n    \"name\": \"Todo\",\n    \"position\": 1,\n    \"color\": \"FF0000\"\n  },\n  {\n    \"id\": 2,\n    \"name\": \"In Progress\",\n    \"position\": 2,\n    \"color\": \"00FF00\"\n  },\n  {\n    \"id\": 3,\n    \"name\": \"Done\",\n    \"position\": 3,\n    \"color\": \"0000FF\"\n  }\n]\n</code></pre>"},{"location":"routes/state/get_states/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The user is not authenticated, or the <code>minban_token</code> cookie is missing or invalid.</p> <p>Example response:</p> <pre><code>{\n  \"error\": \"Unauthorized\"\n}\n</code></pre>"},{"location":"routes/state/get_states/#500-internal-server-error","title":"<code>500</code> Internal Server Error","text":"<p>An unexpected error occurred while querying the database.</p> <p>Example response:</p> <pre><code>{\n  \"error\": \"Failed to retrieve states\"\n}\n</code></pre>"},{"location":"routes/state/update_state/","title":"Update State","text":"PATCH <code>/api/v1/state/:state_id</code> <p>This route is used to update an existing state (or column) for the authenticated user. The state's details, including its name, position, or color, can be modified.</p>"},{"location":"routes/state/update_state/#request","title":"Request","text":""},{"location":"routes/state/update_state/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication is required. A valid <code>minban_token</code> cookie must be present to authorize the request.</p>"},{"location":"routes/state/update_state/#headers","title":"Headers","text":"<pre><code>Content-Type: application/json\n</code></pre>"},{"location":"routes/state/update_state/#parameters","title":"Parameters","text":"<p><code>card_id</code> (string, required): The unique identifier of the card to be updated.</p>"},{"location":"routes/state/update_state/#body-json","title":"Body (JSON)","text":"<p>The request body must contain the state details.  Example:</p> <pre><code>{\n  \"name\": \"In Progress\",\n  \"position\": 2,\n  \"color\": \"00FF00\"\n}\n</code></pre>"},{"location":"routes/state/update_state/#responses","title":"Responses","text":""},{"location":"routes/state/update_state/#204-no-content","title":"<code>204</code> No Content","text":"<p>The request was successful, and the state was updated. No content is returned in the response.</p>"},{"location":"routes/state/update_state/#400-bad-request","title":"<code>400</code> Bad Request","text":"<p>The request was invalid.</p>"},{"location":"routes/state/update_state/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The user is not authenticated, or the minban_token cookie is missing or invalid.</p>"},{"location":"routes/state/update_state/#500-internal-server-error","title":"<code>500</code> Internal Server Error","text":"<p>An unexpected error occurred while updating the state.</p>"},{"location":"routes/tag/create_tag/","title":"Create Tag","text":"POST <code>/api/v1/tag</code> <p>This route is used to create a new tag for the authenticated user. Tags help categorize or label cards.</p>"},{"location":"routes/tag/create_tag/#request","title":"Request","text":""},{"location":"routes/tag/create_tag/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication is required. A valid <code>minban_token</code> cookie must be present to authorize the request.</p>"},{"location":"routes/tag/create_tag/#headers","title":"Headers","text":"<pre><code>Content-Type: application/json\n</code></pre>"},{"location":"routes/tag/create_tag/#body-json","title":"Body (JSON)","text":"<p>The request body must contain the tag details.  Example:</p> <pre><code>{\n  \"name\": \"Bug\",\n  \"color\": \"FF0000\"\n}\n</code></pre>"},{"location":"routes/tag/create_tag/#responses","title":"Responses","text":""},{"location":"routes/tag/create_tag/#201-created","title":"<code>201</code> Created","text":"<p>The tag was successfully created. The response includes the tag's unique ID.</p> <p>Example response:</p> <pre><code>{\n  \"id\": 1\n}\n</code></pre>"},{"location":"routes/tag/create_tag/#400-bad-request","title":"<code>400</code> Bad Request","text":"<p>The request was invalid. </p>"},{"location":"routes/tag/create_tag/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The user is not authenticated, or the minban_token cookie is missing or invalid.</p>"},{"location":"routes/tag/create_tag/#500-internal-server-error","title":"<code>500</code> Internal Server Error","text":"<p>An unexpected error occurred while creating the state.</p>"},{"location":"routes/tag/delete_tag/","title":"Delete Tag","text":"DELETE <code>/api/v1/tag/:tag_id</code> <p>This route is used to delete an existing tag for the authenticated user. Once deleted, the tag is permanently removed from the database.</p>"},{"location":"routes/tag/delete_tag/#request","title":"Request","text":""},{"location":"routes/tag/delete_tag/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication is required. A valid <code>minban_token</code> cookie must be present to authorize the request.</p>"},{"location":"routes/tag/delete_tag/#headers","title":"Headers","text":"<p>No special headers required.</p>"},{"location":"routes/tag/delete_tag/#parameters","title":"Parameters","text":"<p><code>tag_id</code> (integer, required): The unique identifier of the tag to be deleted.</p>"},{"location":"routes/tag/delete_tag/#responses","title":"Responses","text":""},{"location":"routes/tag/delete_tag/#204-no-content","title":"<code>204</code> No Content","text":"<p>The request was successful, and the tag was deleted. No content is returned in the response.</p>"},{"location":"routes/tag/delete_tag/#400-bad-request","title":"<code>400</code> Bad Request","text":"<p>The request was invalid.</p>"},{"location":"routes/tag/delete_tag/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The user is not authenticated, or the <code>minban_token</code> cookie is missing or invalid.</p>"},{"location":"routes/tag/delete_tag/#500-internal-server-error","title":"<code>500</code> Internal Server Error","text":"<p>An unexpected error occurred while deleting the card.</p>"},{"location":"routes/tag/get_tags/","title":"Get Tags","text":"GET <code>/api/v1/tags</code> <p>This route is used to retrieve all tags associated with the authenticated user.</p>"},{"location":"routes/tag/get_tags/#request","title":"Request","text":""},{"location":"routes/tag/get_tags/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication is required. A valid <code>minban_token</code> cookie must be present to authorize the request.</p>"},{"location":"routes/tag/get_tags/#headers","title":"Headers","text":"<p>No special headers required.</p>"},{"location":"routes/tag/get_tags/#body","title":"Body","text":"<p>No body is required.</p>"},{"location":"routes/tag/get_tags/#responses","title":"Responses","text":""},{"location":"routes/tag/get_tags/#200-ok","title":"<code>200</code> OK","text":"<p>The request was successful, and a list of tags associated with the authenticated user is returned. Each tag includes its details.</p> <p>Example response:</p> <pre><code>[\n  {\n    \"id\": 1,\n    \"name\": \"Bug\",\n    \"color\": \"FF0000\"\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Feature\",\n    \"color\": \"00FF00\"\n  },\n  {\n    \"id\": 3,\n    \"name\": \"Enhancement\",\n    \"color\": \"0000FF\"\n  }\n]\n</code></pre>"},{"location":"routes/tag/get_tags/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The user is not authenticated, or the <code>minban_token</code> cookie is missing or invalid.</p> <p>Example response:</p> <pre><code>{\n  \"error\": \"Unauthorized\"\n}\n</code></pre>"},{"location":"routes/tag/get_tags/#500-internal-server-error","title":"<code>500</code> Internal Server Error","text":"<p>An unexpected error occurred while querying the database.</p> <p>Example response:</p> <pre><code>{\n  \"error\": \"Failed to retrieve states\"\n}\n</code></pre>"},{"location":"routes/tag/update_tag/","title":"Update Tag","text":"PATCH <code>/api/v1/tag/:tag_id</code> <p>This route is used to update an existing tag for the authenticated user. The tag's details, including its name or color, can be modified.</p>"},{"location":"routes/tag/update_tag/#request","title":"Request","text":""},{"location":"routes/tag/update_tag/#authentication","title":"Authentication","text":"<p>\ud83d\udd12 Authentication is required. A valid <code>minban_token</code> cookie must be present to authorize the request.</p>"},{"location":"routes/tag/update_tag/#headers","title":"Headers","text":"<pre><code>Content-Type: application/json\n</code></pre>"},{"location":"routes/tag/update_tag/#parameters","title":"Parameters","text":"<p><code>card_id</code> (string, required): The unique identifier of the card to be updated.</p>"},{"location":"routes/tag/update_tag/#body-json","title":"Body (JSON)","text":"<p>The request body must contain the tag details.  Example:</p> <pre><code>{\n  \"name\": \"Feature\",\n  \"color\": \"00FF00\"\n}\n</code></pre>"},{"location":"routes/tag/update_tag/#responses","title":"Responses","text":""},{"location":"routes/tag/update_tag/#204-no-content","title":"<code>204</code> No Content","text":"<p>The request was successful, and the tag was updated. No content is returned in the response.</p>"},{"location":"routes/tag/update_tag/#400-bad-request","title":"<code>400</code> Bad Request","text":"<p>The request was invalid.</p>"},{"location":"routes/tag/update_tag/#401-unauthorized","title":"<code>401</code> Unauthorized","text":"<p>The user is not authenticated, or the minban_token cookie is missing or invalid.</p>"},{"location":"routes/tag/update_tag/#500-internal-server-error","title":"<code>500</code> Internal Server Error","text":"<p>An unexpected error occurred while updating the state.</p>"}]}